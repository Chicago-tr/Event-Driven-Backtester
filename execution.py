#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from abc import ABCMeta, abstractmethod
import datetime
import queue
from event import FillEvent, OrderEvent



class ExecutionHandler(object):
    """
    Abstract class for handling interaction between sets of order objects
    generated by Portfolio and the set of Fill objects that occur in the market.

    Handlers can be used to subclass simulated brokerages or live brokerages, with
    identical interfaces. This should make it so strategies can be backtested
    in a manner similar to a live trading engine.
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Executes a given Order event which produces a Fill event that is placed
        into the Events queue

        Parameters
        ----------
        event : an Event object with order info.
        """
        raise NotImplementedError("Implement execute_order()")


"""
Will be assuming all order are filled at current market price for simplicity
Realism can be improved by designing model of slippage and market impact
"""

class SimulatedExecutionHandler(ExecutionHandler):
    """
    Converts all order objects into their equivalent fill objects automatically
    without accounting for latency, slippage, or fill-ratio issues.

    This allows for a simple test of any strategy before implementing a more
    sophisticated execution handler
    """

    def __init__(self, events):
        """
        Initializes the handler, setting event queues up internally.

        Parameters
        ----------
        events : Queue of Event objects
        """
        self.events = events

    def execute_order(self, event):
        """
        Converts Order objects to Fill objects naively (no latency, slippage,
        fill ratio problems etc.)

        Parameters
        ----------
        event : Contains an Event object with order info.
        """
        if event.type == 'ORDER':
            #ARCA is the exchange and NONE is for fill_cost since cost of fill
            #already in Portfolio. Can improve engine with a model using "current" data
            #realistic fill here
            fill_event = FillEvent( datetime.datetime.utcnow(), event.symbol,
                                   'Exchange Name', event.quantity, event.direction, None)

            self.events.put(fill_event)

